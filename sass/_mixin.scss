// Using the CSS selector :first-of-type you can select the first element of the selector.

@mixin first-child() {
  &:first-of-type {
    @content
  }
}

// we can also use the :last-of-type selector to get the last element of the group.

@mixin last-child() {
  &:last-of-type {
    @content
  }
}

// this will select all even elements in the list of selected elements.

@mixin even(){
  &:nth-child(even) {
    @content
  }
}

// Similar to the evens nth-child selector you can use odd to select the odd elements in the group.

@mixin odd(){
  &:nth-child(odd) {
    @content
  }
}

// If you want to select the first nth number of elements you can use the following mixin, this will take a
// parameter of how many elements you want to select. If you pass in 1 if will just use the first-child selector,
// if you pass in any other number then it uses nth-child selector to get the first nth elements.

@mixin first($num) {

  @if $num == 1 {
    &:first-child {
      @content;
    }
  }

  @else {
    &:nth-child(-n + #{$num}) {
      @content;
    }
  }
}

// Similar to the first nth selector you can do the opposite and select the last nth elements.

@mixin last($num) {
  &:nth-last-child(-n + #{$num}) {
    @content;
  }
}

// The following mixin will allow you to select all elements after a certain number, for this example we\'re passing
// in the number 4 which means the mixin will highlight elements 5-10.

@mixin after($num) {
  &:nth-child(n+#{$num + 1}) {
    @content
  }
}

// Using this mixin you are able to select a certain element from the end of the group of elements, for this example
// we're passing in the number 4 again and the mixin will select the 4th element from the end being number 7.

@mixin from-end($num) {
  &:nth-last-child(#{$num}) {
    @content
  }
}

// If you want to select the elements between 2 numbers then you can use the following mixin and pass in the
// start number and the end number.

@mixin between($first,$last) {
  &:nth-child(n+#{$first}):nth-child(-n+#{$last}) {
    @content
  }
}

// To select all the elements excluding one use the following mixin, just pass in the number you want to exclude
// and all will be highlighted apart from this number.

@mixin all-but($num) {
  &:not(:nth-child(#{$num})) {
    @content
  }
}

// Or you can use nth-child the way it was designed for by selecting every nth element by passing in a number,
// in this example we're passing in 3 which will highlight elements 3, 6 and 9.

@mixin each($num) {
  &:nth-child(#{$num}n) {
    @content
  }
}

@mixin keyframe ($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}

@mixin animation ($delay, $duration, $name, $count, $direction, $fill, $play, $timingFunc) {
  @if $delay != '' {
    -webkit-animation-delay: $delay;
    -moz-animation-delay: $delay;
    -o-animation-delay: $delay;
    animation-delay: $delay;
  }
  @if $duration != '' {
    -webkit-animation-duration: $duration;
    -moz-animation-duration: $duration;
    -o-animation-duration: $duration;
    animation-duration: $duration;
  }
  @if $name != '' {
    -webkit-animation-name: $name;
    -moz-animation-name: $name;
    -o-animation-name: $name;
    animation-name: $name;
  }
  @if $count != '' {
    -webkit-animation-iteration-count: $count;
    -moz-animation-iteration-count: $count;
    -o-animation-iteration-count: $count;
    animation-iteration-count: $count;
  }
  @if $direction != '' {
    -webkit-animation-direction: $direction;
    -moz-animation-direction: $direction;
    -o-animation-direction: $direction;
    animation-direction: $direction;
  }
  @if $fill != '' { /* this prevents the animation from restarting! */
    -webkit-animation-fill-mode: $fill;
    -moz-animation-fill-mode: $fill;
    -o-animation-fill-mode: $fill;
    animation-fill-mode: $fill;
  }
  @if $play != '' {
    -webkit-animation-play-state: $play;
    -moz-animation-play-state: $play;
    -o-animation-play-state: $play;
    animation-play-state: $play;
  }
  @if $timingFunc != '' {
    -webkit-animation-timing-function: $timingFunc;
    -moz-animation-timing-function: $timingFunc;
    -o-animation-timing-function: $timingFunc;
    animation-timing-function: $timingFunc;
  }
}

@mixin transition($transition...) {
  -moz-transition:    $transition;
  -o-transition:      $transition;
  -webkit-transition: $transition;
  transition:         $transition;
}
@mixin transition-property($property...) {
  -moz-transition-property:    $property;
  -o-transition-property:      $property;
  -webkit-transition-property: $property;
  transition-property:         $property;
}
@mixin transition-duration($duration...) {
  -moz-transition-duration:    $duration;
  -o-transition-duration:      $duration;
  -webkit-transition-duration: $duration;
  transition-duration:         $duration;
}
@mixin transition-timing-function($timing...) {
  -moz-transition-timing-function:    $timing;
  -o-transition-timing-function:      $timing;
  -webkit-transition-timing-function: $timing;
  transition-timing-function:         $timing;
}
@mixin transition-delay($delay...) {
  -moz-transition-delay:    $delay;
  -o-transition-delay:      $delay;
  -webkit-transition-delay: $delay;
  transition-delay:         $delay;
}